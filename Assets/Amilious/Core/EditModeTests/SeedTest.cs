/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//    _____            .__ .__   .__                             _________  __              .___.__                   //
//   /  _  \    _____  |__||  |  |__|  ____   __ __  ______     /   _____/_/  |_  __ __   __| _/|__|  ____   ______   //
//  /  /_\  \  /     \ |  ||  |  |  | /  _ \ |  |  \/  ___/     \_____  \ \   __\|  |  \ / __ | |  | /  _ \ /  ___/   //
// /    |    \|  Y Y  \|  ||  |__|  |(  <_> )|  |  /\___ \      /        \ |  |  |  |  // /_/ | |  |(  <_> )\___ \    //
// \____|__  /|__|_|  /|__||____/|__| \____/ |____//____  >    /_______  / |__|  |____/ \____ | |__| \____//____  >   //
//         \/       \/                                  \/             \/                    \/                 \/    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Website:        http://www.amilious,com         Unity Asset Store: https://assetstore.unity.com/publishers/62511  //
//  Discord Server: https://discord.gg/SNqyDWu            CopyrightÂ© Amilious since 2022                              //                    
//  This code is part of an asset on the unity asset store. If you did not get this from the asset store you are not  //
//  using it legally. Check the asset store or join the discord for the license that applies for this script.         //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/

using UnityEngine;
using NUnit.Framework;

namespace Amilious.Core.EditModeTests {
    
    public class SeedTest {

        [Test]
        public void NextFloat() {

            //generate a new seed
            var seed = new Seed();
            
            //generate some values
            var floatVal1 = seed.NextFloat();
            var floatVal2 = seed.NextFloat();
            
            //create new seed
            seed = new Seed(seed);
            
            //check the values generated by the new seed.
            Assert.AreEqual(floatVal1,seed.NextFloat());
            Assert.AreEqual(floatVal2,seed.NextFloat());

        }

        [Test]
        public void NextRange() {
            
            //generate a new seed
            var seed = new Seed();
            var min = 0;
            var max = 10;
            var minMax = new Vector2(min, max);

            //generate next range
            var rangeVal1 = seed.NextRange(min, max);
            var rangeVal2 = seed.NextRange(minMax);
            
            //create new seed
            seed = new Seed(seed);
            
            //run checks
            Assert.LessOrEqual(rangeVal1, max);
            Assert.LessOrEqual(rangeVal2, max);
            Assert.GreaterOrEqual(rangeVal1, min);
            Assert.GreaterOrEqual(rangeVal2, min);
            Assert.AreEqual(rangeVal1,seed.NextRange(minMax));
            Assert.AreEqual(rangeVal2,seed.NextRange(min,max));

        }

        [Test]
        public void NextBool() {
            
            //generate a new seed
            var seed = new Seed();
            
            //generate some values
            var boolVal1 = seed.NextBool();
            var boolVal2 = seed.NextBool();
            
            //create new seed
            seed = new Seed(seed);
            
            //check the values generated by the new seed.
            Assert.AreEqual(boolVal1,seed.NextBool());
            Assert.AreEqual(boolVal2,seed.NextBool());
            
        }
        
        
    }
}